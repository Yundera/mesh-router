# HTTP server (redirect to HTTPS)
server {
    listen 80;
    server_name _;
    
    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    server_name _;

    # Basic settings
    client_max_body_size 20G;
    chunked_transfer_encoding on;
    client_body_buffer_size 10M;
    client_body_temp_path /tmp/nginx/client_temp 1 2;

    # Timeouts
    client_body_timeout 300s;
    client_header_timeout 300s;
    keepalive_timeout 300s;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Docker DNS and mesh specific settings
    resolver 127.0.0.11;
    set $backend http://127.0.0.1:3000;

    location / {
        access_by_lua_file /etc/nginx/lua/compute_ip.lua;
        proxy_pass $backend;
        proxy_http_version 1.1;

        # WebSocket support
        set $connection_upgrade '';
        if ($http_upgrade ~* ^(websocket|mqtt|wss)$) {
            set $connection_upgrade 'Upgrade';
        }

        # Headers
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Content-Length $content_length;

        # Error handling
        error_page 413 = @413;
        proxy_intercept_errors on;
    }

    # Error response
    location @413 {
        default_type application/json;
        return 413 '{"error": "Request entity too large"}';
    }
}